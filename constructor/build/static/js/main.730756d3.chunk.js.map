{"version":3,"sources":["api/modules/media.ts","api/modules/quest.ts","api/modules/scene.ts","api/index.js","store/actions/index.js","components/Scene/Scene.tsx","components/Navigatons/Sidebar.tsx","components/Navigatons/Header.tsx","layouts/Base.tsx","pages/Constructor/Constructor.tsx","pages/Media.tsx","pages/Quests.tsx","router/router.tsx","store/reducers/media.ts","store/reducers/quest.ts","store/reducers/ui.ts","store/reducers/index.ts","store/index.js","index.tsx"],"names":["getAllMedia","request","addMedia","file","removeMediaById","id","getQuests","getQuestById","updateQuest","params","getScenes","getSceneById","updateScene","createScene","deleteScene","token","localStorage","getItem","axios","defaults","headers","authorization","url","method","data","Promise","resolve","reject","then","response","catch","error","API","media","quest","scene","SET_QUESTS","SET_QUEST","SET_SCENE","SET_UI","SET_HEADER_TEXT","SET_MEDIA","setQuests","createAction","setQuest","setScene","setHeaderText","setMedia","Scene","Dispatch","useDispatch","useState","editMode","setEditMode","sceneStatus","setSceneStatus","setLoading","allTrigerGetter","setAllTrigerGetter","TextArea","Input","Option","Select","Form","useForm","form","useSelector","state","console","log","useEffect","allTriger","Scenes","forEach","scen","Buttons","button","GlobalTriggerNameSetter","push","undefined","align","size","initialValues","PersonName","SceneName","Text","Background","Person","Music","map","GlobalTriggerNameGetter","ModeSwitcher","className","onClick","setFieldsValue","questData","message","success","e","name","onFinish","values","buttons","dataScene","find","newScene","toString","newQuestData","onFinishFailed","errorInfo","layout","Item","label","showSearch","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","mime","value","List","fields","add","remove","key","fieldKey","restField","direction","style","width","trigger","MinusCircleOutlined","type","block","icon","PlusOutlined","htmlType","src","alt","Sidebar","history","useHistory","mode","defaultSelectedKeys","PartitionOutlined","CodeOutlined","DatabaseOutlined","Navbar","header","ui","text","LayoutBase","Header","Layout","Sider","Content","Constructor","useParams","questMap","setQuestMap","isLoading","questDataToMap","nodes","edges","title","source","target","height","nodeCfg","anchorPoints","fill","fontSize","edgeCfg","endArrow","rankdir","hasOwnProperty","questFormatData","questId","Name","onReady","graph","on","evt","item","_cfg","Media","updateMedia","props","multiple","showUploadList","action","onChange","info","status","fileList","InboxOutlined","cover","actions","DeleteOutlined","CustomerServiceOutlined","Quests","quests","length","Quest","extra","to","DefaultStyles","CheckSquareOutlined","CloseSquareOutlined","created_at","updated_at","published_at","Router","path","exact","component","initState","rootReducer","combineReducers","payload","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.730756d3.chunk.js","sourcesContent":["import { request } from \"api\";\n\nexport default {\n  getAllMedia: () => request(`http://localhost:1337/upload/files`, \"get\"),\n  addMedia: (file: any) =>\n    request(`http://localhost:1337/upload/`, \"post\", file),\n  removeMediaById: (id: string | number) =>\n    request(`http://localhost:1337/upload/files/${id}`, \"delete\"),\n};\n","import { request } from \"api\";\n\nexport default {\n  getQuests: () => request(`http://localhost:1337/quests`, \"get\"),\n  getQuestById: (id: string | number) =>\n    request(`http://localhost:1337/quests/${id}`),\n  updateQuest: (id: string | number, params: any) =>\n    request(`http://localhost:1337/quests/${id}`, \"put\", params),\n};\n","import { request } from \"api\";\n\nexport default {\n  getScenes: () => request(`http://localhost:1337/scenes`, \"get\"),\n  getSceneById: (id: string) =>\n    request(`http://localhost:1337/scenes/${id}`, \"get\"),\n  updateScene: (id: string | number, params: any) =>\n    request(`http://localhost:1337/scenes/${id}`, \"put\", params),\n  createScene: (params: any) =>\n    request(`http://localhost:1337/scenes/`, \"post\", params),\n  deleteScene: (id: string | number) =>\n    request(`http://localhost:1337/scenes/${id}`, \"delete\"),\n};\n","import axios from \"axios\";\r\nimport media from \"./modules/media\";\r\nimport quest from \"./modules/quest\";\r\nimport scene from \"./modules/scene\";\r\n\r\nconst token = localStorage.getItem(\"token\") || null;\r\n\r\nif (token) {\r\n  axios.defaults.headers.authorization = `Bearer ${token}`;\r\n}\r\n\r\nexport const request = (url, method, data, headers) => {\r\n  return new Promise((resolve, reject) => {\r\n    return axios({ method, data, url, headers })\r\n      .then((response) => {\r\n        try {\r\n          resolve(response.data);\r\n        } catch {\r\n          resolve(response);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        try {\r\n          reject(error.response.data);\r\n        } catch {\r\n          reject(error);\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\nconst API = {\r\n  media,\r\n  quest,\r\n  scene\r\n}\r\n\r\nexport default API;\r\n","import { createAction } from \"redux-actions\";\r\n\r\nexport const SET_QUESTS = \"SET_QUESTS\";\r\nexport const SET_QUEST = \"SET_QUEST\";\r\nexport const SET_SCENE = \"SET_SCENE\";\r\nexport const SET_UI = \"SET_UI\";\r\nexport const SET_HEADER_TEXT = \"SET_HEADER_TEXT\";\r\nexport const SET_MEDIA = \"SET_MEDIA\";\r\n\r\nexport const setQuests = createAction(SET_QUESTS);\r\nexport const setQuest = createAction(SET_QUEST);\r\nexport const setScene = createAction(SET_SCENE);\r\nexport const setUI = createAction(SET_UI);\r\nexport const setHeaderText = createAction(SET_HEADER_TEXT);\r\nexport const setMedia = createAction(SET_MEDIA);\r\n\r\nexport function setQuestsData(data) {\r\n  return (dispatch) => {\r\n    dispatch(setQuests(data));\r\n  };\r\n}\r\n\r\nexport function setQuestData(data) {\r\n  return (dispatch) => {\r\n    dispatch(setQuestData(data));\r\n  };\r\n}\r\n\r\nexport function setSceneData(data) {\r\n  return (dispatch) => {\r\n    dispatch(setScene(data));\r\n  };\r\n}\r\n\r\nexport function setUIData(data) {\r\n  return (dispatch) => {\r\n    dispatch(setUI(data));\r\n  };\r\n}\r\n\r\nexport function setHeader(data) {\r\n  return (dispatch) => {\r\n    dispatch(setHeaderText(data));\r\n  };\r\n}\r\n\r\nexport function setMediaData(data) {\r\n  return (dispatch) => {\r\n    dispatch(setMedia(data));\r\n  };\r\n}\r\n","import { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport {\n  Button,\n  Divider,\n  Form,\n  Input,\n  message,\n  Select,\n  Space,\n  Spin,\n} from \"antd\";\nimport API from \"api/index\";\nimport dialogBackground from \"assets/images/dialogBackground.svg\";\nimport nameBubble from \"assets/images/nameBubble.svg\";\nimport { TQuest } from \"models/quest\";\nimport { Tbutton, TScene, TSceneStatus } from \"models/scene\";\nimport { StateMedia, StateQuests } from \"models/store\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReactSVG } from \"react-svg\";\nimport { setQuest, setScene } from \"store/actions\";\nimport \"./Scene.sass\";\n\nconst Scene = (): ReactElement => {\n  const Dispatch = useDispatch();\n\n  const [editMode, setEditMode] = useState(false);\n  const [sceneStatus, setSceneStatus] = useState<TSceneStatus>(\"upgrade\");\n  const [isLoading, setLoading] = useState(true);\n  const [allTrigerGetter, setAllTrigerGetter] = useState<string[]>([]);\n  const { TextArea } = Input;\n  const { Option } = Select;\n  const [form] = Form.useForm();\n\n  const { media } = useSelector((state: { media: StateMedia }) => state.media);\n  const { quest, scene } = useSelector(\n    (state: { quest: StateQuests }) => state.quest\n  );\n\n  console.log(`scene`, scene);\n\n  useEffect(() => {\n    setEditMode(false);\n    const allTriger: string[] = [];\n    quest.Scenes.forEach((scen) => {\n      scen.Buttons.forEach((button) => {\n        if (button.GlobalTriggerNameSetter) {\n          allTriger.push(button.GlobalTriggerNameSetter);\n        }\n      });\n    });\n    setAllTrigerGetter(allTriger);\n  }, [scene]);\n\n  if (scene === undefined || scene.id === undefined) {\n    return (\n      <Space align=\"center\">\n        <Spin size=\"large\" />\n      </Space>\n    );\n  }\n\n  const initialValues = {\n    PersonName: scene.PersonName,\n    SceneName: scene.SceneName,\n    Text: scene.Text,\n    Background: scene.Background ? scene.Background.id : \"\",\n    Person: scene.Person ? scene.Person.id : \"\",\n    Music: scene.Music ? scene.Music.id : \"\",\n    Buttons: scene.Buttons.map((button) => {\n      return {\n        Text: button.Text,\n        Scene: button.Scene.id,\n        GlobalTriggerNameSetter: button.GlobalTriggerNameSetter,\n        GlobalTriggerNameGetter: button.GlobalTriggerNameGetter,\n      };\n    }),\n  };\n\n  const ModeSwitcher = () => {\n    return (\n      <Space className=\"config-buttons\">\n        {editMode ? (\n          <Button onClick={() => setEditMode(false)}>Preview</Button>\n        ) : (\n          <Button onClick={() => setEditMode(true)}>Edit</Button>\n        )}\n        <Button\n          onClick={() => {\n            setEditMode(true);\n            setSceneStatus(\"new\");\n            form.setFieldsValue({\n              PersonName: \"\",\n              SceneName: `new scene`,\n              Text: \"\",\n              Background: \"\",\n              Person: \"\",\n              Music: \"\",\n              Buttons: [],\n            });\n          }}\n        >\n          New scene\n        </Button>\n        <Button\n          onClick={() => {\n            setEditMode(true);\n            setSceneStatus(\"new\");\n            form.setFieldsValue({\n              PersonName: scene.PersonName,\n              SceneName: scene.SceneName,\n              Text: scene.Text,\n              Background: scene.Background ? scene.Background.id : \"\",\n              Person: scene.Person ? scene.Person.id : \"\",\n              Music: scene.Music ? scene.Music.id : \"\",\n              Buttons: scene.Buttons.map((button) => {\n                return {\n                  Text: button.Text,\n                  Scene: button.Scene.id,\n                  GlobalTriggerNameSetter: button.GlobalTriggerNameSetter,\n                  GlobalTriggerNameGetter: button.GlobalTriggerNameGetter,\n                };\n              }),\n            });\n          }}\n        >\n          Copy scene\n        </Button>\n        <Button\n          onClick={() => {\n            API.scene.deleteScene(scene.id).then(() => {\n              API.quest\n                .getQuestById(quest.id)\n                .then((questData: TQuest) => {\n                  Dispatch(setQuest(questData));\n                  message.success(`Remove success`);\n                  setLoading(false);\n                })\n                .catch((e) => {\n                  console.log(e);\n                });\n            });\n          }}\n        >\n          Remove Scene\n        </Button>\n      </Space>\n    );\n  };\n\n  const onFinish = (values: any) => {\n    console.log(\"Success:\", values);\n    setLoading(true);\n\n    const buttons: Tbutton[] = [];\n\n    values.Buttons.forEach((button: Tbutton) => {\n      if (button.Scene) {\n        buttons.push(button);\n      }\n    });\n\n    const dataScene = {\n      ...values,\n      Buttons: buttons,\n    };\n\n    if (sceneStatus === \"upgrade\") {\n      API.scene.updateScene(scene.id, dataScene).then(() => {\n        setSceneStatus(\"upgrade\");\n        API.quest\n          .getQuestById(quest.id)\n          .then((questData: TQuest) => {\n            Dispatch(setQuest(questData));\n            const updateScene = questData.Scenes.find(\n              (newScene) => newScene.id.toString() === scene.id.toString()\n            );\n            Dispatch(setScene(updateScene));\n            message.success(`Save success`);\n            setLoading(false);\n          })\n          .catch((e) => {\n            console.log(e);\n          });\n      });\n    } else {\n      API.scene.createScene(dataScene).then((data: TScene) => {\n        const newQuestData = {\n          ...quest,\n          Scenes: [...quest.Scenes, data.id],\n        };\n        API.quest\n          .updateQuest(quest.id, newQuestData)\n          .then((questData: TQuest) => {\n            Dispatch(setQuest(questData));\n            const updateScene = questData.Scenes.find(\n              (newScene) => newScene.id.toString() === scene.id.toString()\n            );\n            Dispatch(setScene(updateScene));\n            message.success(`Save success`);\n            setLoading(false);\n          })\n          .catch((e) => {\n            console.log(e);\n          });\n      });\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  if (editMode) {\n    return (\n      <div className=\"scene-form\">\n        <ModeSwitcher />\n        <Form\n          name=\"scene\"\n          onFinish={onFinish}\n          form={form}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          initialValues={initialValues}\n        >\n          <Form.Item label=\"Scene name\" name=\"SceneName\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Person name\" name=\"PersonName\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Text\" name=\"Text\">\n            <TextArea />\n          </Form.Item>\n          <Form.Item label=\"Background Image\" name=\"Background\">\n            <Select\n              showSearch\n              placeholder=\"Select background\"\n              optionFilterProp=\"children\"\n              filterOption={(input, option: any) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              filterSort={(optionA: any, optionB: any) =>\n                optionA.children\n                  .toLowerCase()\n                  .localeCompare(optionB.children.toLowerCase())\n              }\n            >\n              {media.map((file) => {\n                if (file.mime === \"image/png\" || file.mime === \"image/jpeg\") {\n                  return <Option value={file.id}>{file.name}</Option>;\n                }\n              })}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Person Image\" name=\"Person\">\n            <Select\n              showSearch\n              placeholder=\"Select background\"\n              optionFilterProp=\"children\"\n              filterOption={(input, option: any) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              filterSort={(optionA: any, optionB: any) =>\n                optionA.children\n                  .toLowerCase()\n                  .localeCompare(optionB.children.toLowerCase())\n              }\n            >\n              {media.map((file) => {\n                if (file.mime === \"image/png\" || file.mime === \"image/jpeg\") {\n                  return <Option value={file.id}>{file.name}</Option>;\n                }\n              })}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Music\" name=\"Music\">\n            <Select\n              showSearch\n              placeholder=\"Select music\"\n              optionFilterProp=\"children\"\n              filterOption={(input, option: any) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              filterSort={(optionA: any, optionB: any) =>\n                optionA.children\n                  .toLowerCase()\n                  .localeCompare(optionB.children.toLowerCase())\n              }\n            >\n              {media.map((file) => {\n                if (file.mime === \"audio/mpeg\") {\n                  return <Option value={file.id}>{file.name}</Option>;\n                }\n              })}\n            </Select>\n          </Form.Item>\n\n          <Form.List name=\"Buttons\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\n                  <>\n                    <Divider />\n                    <Space align=\"baseline\" key={key} direction=\"horizontal\">\n                      <Space direction=\"vertical\" style={{ width: `400px` }}>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"Text\"]}\n                          label=\"Text\"\n                          fieldKey={[fieldKey, \"Text\"]}\n                        >\n                          <Input placeholder=\"Text\" />\n                        </Form.Item>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"Scene\"]}\n                          label=\"Scene name\"\n                          fieldKey={[fieldKey, \"Scene\"]}\n                        >\n                          <Select>\n                            {quest.Scenes.map((scene) => {\n                              return (\n                                <Option value={scene.id}>\n                                  {scene.SceneName}\n                                </Option>\n                              );\n                            })}\n                          </Select>\n                        </Form.Item>\n                      </Space>\n                      <Space direction=\"vertical\">\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"GlobalTriggerNameSetter\"]}\n                          label=\"Trigger Setter\"\n                          fieldKey={[fieldKey, \"GlobalTriggerNameSetter\"]}\n                        >\n                          <Input placeholder=\"GlobalTriggerNameSetter\" />\n                        </Form.Item>\n                        <Form.Item\n                          {...restField}\n                          name={[name, \"GlobalTriggerNameGetter\"]}\n                          label=\"Trigger Getter\"\n                          fieldKey={[fieldKey, \"GlobalTriggerNameGetter\"]}\n                        >\n                          <Select>\n                            {allTrigerGetter.map((trigger) => {\n                              return <Option value={trigger}>{trigger}</Option>;\n                            })}\n                          </Select>\n                        </Form.Item>\n                      </Space>\n                      <MinusCircleOutlined onClick={() => remove(name)} />\n                    </Space>\n                  </>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add button\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"scene\">\n        <ModeSwitcher />\n        {scene.Background && (\n          <div className=\"background\">\n            <img\n              className=\"scene-background\"\n              src={`http://localhost:1337${scene.Background.url}`}\n              alt=\"background\"\n            />\n          </div>\n        )}\n        {scene.Person && (\n          <div className=\"person\">\n            <img\n              src={`http://localhost:1337${scene.Person.url}`}\n              alt=\"person\"\n            />\n          </div>\n        )}\n        <div className=\"controls-wrap\">\n          <p className=\"name name-right\">\n            {scene.PersonName}\n            <span className=\"name-earth\">_</span>\n          </p>\n\n          <div className=\"controls\">\n            <p className=\"dialog\">{scene.Text}</p>\n            <div className=\"buttons\">\n              {scene.Buttons.map((button: any) => (\n                <button key={button.Text} className=\"button\">\n                  {button.Text}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Scene;\n","import {\r\n  CodeOutlined,\r\n  DatabaseOutlined,\r\n  PartitionOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Menu } from \"antd\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Sidebar = (): JSX.Element => {\r\n  const history = useHistory();\r\n  return (\r\n    <Menu mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n      <Menu.Item\r\n        key=\"1\"\r\n        onClick={() => {\r\n          history.push(`/quests`);\r\n        }}\r\n        icon={<PartitionOutlined />}\r\n      >\r\n        Конструктор\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"2\"\r\n        onClick={() => {\r\n          history.push(`/deploy`);\r\n        }}\r\n        icon={<CodeOutlined />}\r\n      >\r\n        Деплой\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key=\"3\"\r\n        onClick={() => {\r\n          history.push(`/resourses`);\r\n        }}\r\n        icon={<DatabaseOutlined />}\r\n      >\r\n        Ресурсы\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { StateUI } from \"models/store\";\nimport { ReactElement } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Header.sass\";\n\nconst Navbar = (): ReactElement => {\n  const header = useSelector((state: { ui: StateUI }) => state.ui.header);\n  return <h2>{header.text}</h2>;\n};\n\nexport default Navbar;\n","import { Layout } from \"antd\";\r\nimport Sidebar from \"components/Navigatons/Sidebar\";\r\nimport { ReactElement } from \"react\";\r\nimport Navbar from \"../components/Navigatons/Header\";\r\nimport \"./layout.sass\";\r\n\r\nconst LayoutBase = ({\r\n  children,\r\n}: {\r\n  children: ReactElement | ReactElement[];\r\n}): ReactElement => {\r\n  const { Header, Sider, Content } = Layout;\r\n\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <Sider>\r\n        <Sidebar />\r\n      </Sider>\r\n      <Layout>\r\n        <Header>\r\n          <Navbar />\r\n        </Header>\r\n        <Content>{children}</Content>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default LayoutBase;\r\n","import { FlowAnalysisGraph } from \"@ant-design/charts\";\nimport { Space, Spin } from \"antd\";\nimport API from \"api/index\";\nimport Scene from \"components/Scene/Scene\";\nimport LayoutBase from \"layouts/Base\";\nimport { TQuest } from \"models/quest\";\nimport { StateQuests } from \"models/store\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport { setHeaderText, setMedia, setQuest, setScene } from \"store/actions\";\nimport \"./Constructor.sass\";\n\ninterface TMapNode {\n  id: string;\n  value: {\n    title: string;\n  };\n}\n\ninterface TMapEdge {\n  source: string;\n  target: string;\n}\n\ninterface TMap {\n  data: {\n    nodes: TMapNode[];\n    edges: TMapEdge[];\n  };\n}\n\nconst Constructor = (): ReactElement => {\n  let params: { questId: string } = useParams();\n  const Dispatch = useDispatch();\n  const [questMap, setQuestMap] = useState<TMap>();\n  const [isLoading, setLoading] = useState<boolean>(true);\n  const { quest } = useSelector((state: { quest: StateQuests }) => state.quest);\n\n  const questDataToMap = (questData: TQuest): TMap => {\n    const nodes: TMapNode[] = [];\n    const edges: TMapEdge[] = [];\n    questData.Scenes.forEach((scene) => {\n      nodes.push({\n        id: scene.id.toString(),\n        value: {\n          title: scene.SceneName,\n        },\n      });\n\n      scene.Buttons.map((button) => {\n        edges.push({\n          source: scene.id.toString(),\n          target: button.Scene.id.toString(),\n        });\n      });\n    });\n\n    const config = {\n      data: {\n        nodes,\n        edges,\n      },\n      height: 875,\n      nodeCfg: {\n        type: \"rect\",\n        anchorPoints: [\n          [0.5, 1],\n          [0.5, 0],\n        ],\n        title: {\n          style: {\n            fill: \"#000\",\n            fontSize: 12,\n          },\n        },\n      },\n      edgeCfg: {\n        type: \"polyline\",\n        endArrow: {\n          fill: \"#ccc\",\n        },\n      },\n      layout: {\n        rankdir: \"TB\",\n      },\n    };\n\n    return config;\n  };\n\n  useEffect(() => {\n    if (quest.hasOwnProperty(\"Scenes\")) {\n      const questFormatData = questDataToMap(quest);\n      setQuestMap(questFormatData);\n    }\n  }, [quest]);\n\n  useEffect(() => {\n    Dispatch(setHeaderText(\"Ваши квесты\"));\n    setLoading(true);\n    if (params.questId) {\n      API.quest\n        .getQuestById(params.questId)\n        .then((questData: TQuest) => {\n          const questFormatData = questDataToMap(questData);\n          setQuestMap(questFormatData);\n          Dispatch(setHeaderText(`${questData.Name}`));\n          Dispatch(setQuest(questData));\n          setLoading(false);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    }\n    API.media.getAllMedia().then((media) => {\n      Dispatch(setMedia(media));\n    });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <LayoutBase>\n        <div className=\"page page-scenes\">\n          <Space align=\"center\">\n            <Spin size=\"large\" />\n          </Space>\n        </div>\n      </LayoutBase>\n    );\n  }\n\n  if (quest) {\n    return (\n      <LayoutBase>\n        <div className=\"page page-constructor\">\n          <div className=\"page-map\">\n            <FlowAnalysisGraph\n              {...questMap}\n              onReady={(graph: any) => {\n                graph.on(\"node:click\", (evt: any) => {\n                  const item = evt.item._cfg;\n                  const scene = quest.Scenes.find(\n                    (scene) => scene.id.toString() === item.id\n                  );\n                  Dispatch(setScene(scene));\n                });\n              }}\n            />\n          </div>\n          <div className=\"page-scenes\">\n            <Scene />\n          </div>\n        </div>\n      </LayoutBase>\n    );\n  }\n\n  return <h2>Load</h2>;\n};\n\nexport default Constructor;\n","import {\n  CustomerServiceOutlined,\n  DeleteOutlined,\n  InboxOutlined,\n} from \"@ant-design/icons\";\nimport { Button, Card, Image, message, Space, Spin, Upload } from \"antd\";\nimport Meta from \"antd/lib/card/Meta\";\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport API from \"api/index\";\nimport LayoutBase from \"layouts/Base\";\nimport { StateMedia } from \"models/store\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setHeaderText, setMedia } from \"store/actions\";\nimport \"./Media.sass\";\n\nconst Media = (): ReactElement => {\n  const Dispatch = useDispatch();\n  const { media, isLoading } = useSelector(\n    (state: { media: StateMedia }) => state.media\n  );\n\n  const updateMedia = () => {\n    API.media.getAllMedia().then((media) => {\n      Dispatch(setMedia(media));\n    });\n  };\n\n  useEffect(() => {\n    Dispatch(setHeaderText(\"Ваши вложения\"));\n    updateMedia();\n  }, []);\n\n  const props = {\n    name: \"files\",\n    multiple: true,\n    showUploadList: false,\n    action: \"http://localhost:1337/upload/\",\n    onChange(info: any) {\n      if (info.file.status !== \"uploading\") {\n        console.log(info.file, info.fileList);\n      }\n      if (info.file.status === \"done\") {\n        message.success(`${info.file.name} file uploaded successfully`);\n        updateMedia();\n      } else if (info.file.status === \"error\") {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n  };\n\n  if (isLoading) {\n    return (\n      <LayoutBase>\n        <div className=\"page page-media\">\n          <Space align=\"center\">\n            <Spin size=\"large\" />\n          </Space>\n        </div>\n      </LayoutBase>\n    );\n  }\n\n  return (\n    <LayoutBase>\n      <div className=\"page page-media\">\n        <Dragger {...props} className=\"media-dnd\">\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">\n            Click or drag file to this area to upload\n          </p>\n          <p className=\"ant-upload-hint\">\n            Support for a single or bulk upload. Strictly prohibit from\n            uploading company data or other band files\n          </p>\n        </Dragger>\n        <div className=\"media-gallery\">\n          {media.map((item) => {\n            console.log(item);\n            switch (item.mime) {\n              case `image/jpeg`:\n              case `image/png`:\n                return (\n                  <Card\n                    style={{ width: 300 }}\n                    cover={\n                      <Image\n                        className=\"media-item media-image\"\n                        src={`http://localhost:1337${item.url}`}\n                      />\n                    }\n                    className=\"media-item\"\n                    actions={[\n                      <DeleteOutlined\n                        onClick={() => {\n                          API.media.removeMediaById(item.id).then(() => {\n                            updateMedia();\n                          });\n                        }}\n                        key=\"setting\"\n                      />,\n                    ]}\n                  >\n                    <Meta title={`${item.name}`} />\n                  </Card>\n                );\n              case `audio/mpeg`:\n                return (\n                  <Card\n                    style={{ width: 300 }}\n                    className=\"media-item\"\n                    actions={[\n                      <DeleteOutlined\n                        onClick={() => {\n                          API.media.removeMediaById(item.id).then(() => {\n                            updateMedia();\n                          });\n                        }}\n                        key=\"setting\"\n                      />,\n                    ]}\n                  >\n                    <CustomerServiceOutlined />\n                    <Meta title={`${item.name}`} />\n                  </Card>\n                );\n\n              default:\n                break;\n            }\n            return item.name;\n          })}\n        </div>\n      </div>\n    </LayoutBase>\n  );\n};\n\nexport default Media;\n","import { CheckSquareOutlined, CloseSquareOutlined } from \"@ant-design/icons\";\nimport { Card, Space, Spin } from \"antd\";\nimport API from \"api/index\";\nimport LayoutBase from \"layouts/Base\";\nimport { TQuest } from \"models/quest\";\nimport { StateQuests } from \"models/store\";\nimport { ReactElement, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { setHeaderText, setQuests } from \"store/actions\";\nimport \"./Quests.sass\";\nconst Quests = (): ReactElement => {\n  const Dispatch = useDispatch();\n  const { quests, isLoading } = useSelector(\n    (state: { quest: StateQuests }) => state.quest\n  );\n\n  useEffect(() => {\n    Dispatch(setHeaderText(\"Ваши квесты\"));\n    API.quest\n      .getQuests()\n      .then((quests: TQuest[]) => {\n        Dispatch(setQuests(quests));\n        Dispatch(setHeaderText(`Ваши квесты (${quests.length})`));\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <LayoutBase>\n        <div className=\"page page-quests\">\n          <Space align=\"center\">\n            <Spin size=\"large\" />\n          </Space>\n        </div>\n      </LayoutBase>\n    );\n  }\n\n  return (\n    <LayoutBase>\n      <div className=\"page page-quests\">\n        <Space direction=\"vertical\">\n          {quests.map((Quest) => {\n            return (\n              <Card\n                key={Quest.id}\n                title={Quest.Name}\n                extra={<Link to={`/constructor/${Quest.id}`}>Открыть</Link>}\n                className=\"quest\"\n              >\n                <p>Сцен: {Quest.Scenes.length}</p>\n                <p>\n                  Глобальные стили:\n                  {Quest.DefaultStyles ? (\n                    <CheckSquareOutlined />\n                  ) : (\n                    <CloseSquareOutlined />\n                  )}\n                </p>\n                <p>Дата создания: {Quest.created_at}</p>\n                <p>Дата обновления: {Quest.updated_at}</p>\n                <p>Дата публикации: {Quest.published_at}</p>\n              </Card>\n            );\n          })}\n        </Space>\n      </div>\n    </LayoutBase>\n  );\n};\n\nexport default Quests;\n","import Constructor from \"pages/Constructor/Constructor\";\r\nimport Media from \"pages/Media\";\r\nimport Quests from \"pages/Quests\";\r\nimport { FC, ReactElement } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nconst Router: FC = (): ReactElement => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route\r\n          path={[`/`, `/quests`, `/deploy`]}\r\n          exact={true}\r\n          component={Quests}\r\n        />\r\n        <Route\r\n          path={[`/constructor/:questId`]}\r\n          exact={true}\r\n          component={Constructor}\r\n        />\r\n        <Route path={[`/resourses`]} exact={true} component={Media} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import { StateMedia } from \"models/store\";\nimport { SET_MEDIA } from \"store/actions\";\n\nconst initState = {\n  isLoading: true,\n  media: [],\n  error: null,\n};\n\nexport const media = (\n  state: StateMedia = initState,\n  action: { payload: any; type: string }\n): StateMedia => {\n  switch (action.type) {\n    case SET_MEDIA:\n      return {\n        ...state,\n        isLoading: false,\n        media: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { TQuest } from \"models/quest\";\r\nimport { TScene } from \"models/scene\";\r\nimport { StateQuests } from \"models/store\";\r\nimport { SET_QUEST, SET_QUESTS, SET_SCENE } from \"store/actions\";\r\n\r\nconst initState = {\r\n  isLoading: true,\r\n  quests: [],\r\n  quest: {} as TQuest,\r\n  scene: {} as TScene,\r\n  error: null,\r\n};\r\n\r\nexport const quest = (\r\n  state: StateQuests = initState,\r\n  action: { payload: any; type: string }\r\n): StateQuests => {\r\n  switch (action.type) {\r\n    case SET_QUESTS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        quests: action.payload,\r\n      };\r\n    case SET_QUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        quest: action.payload,\r\n      };\r\n    case SET_SCENE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        scene: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { StateUI } from \"models/store\";\nimport { SET_HEADER_TEXT, SET_UI } from \"store/actions\";\n\nconst initState = {\n  isLoading: true,\n  header: {\n    text: \"\",\n  },\n  error: null,\n};\n\nexport const ui = (\n  state: StateUI = initState,\n  action: { payload: any; type: string }\n): StateUI => {\n  switch (action.type) {\n    case SET_UI:\n      return {\n        ...state,\n        isLoading: false,\n        ...action.payload,\n      };\n    case SET_HEADER_TEXT:\n      return {\n        ...state,\n        isLoading: false,\n        header: {\n          text: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\r\nimport { media } from \"./media\";\r\nimport { quest } from \"./quest\";\r\nimport { ui } from \"./ui\";\r\n\r\nconst rootReducer = combineReducers({\r\n  media,\r\n  quest,\r\n  ui,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import \"antd/dist/antd.less\";\r\nimport \"assets/sass/index.sass\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport Router from \"router/router\";\r\nimport { store } from \"store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router />\r\n    </Provider>\r\n    ,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}